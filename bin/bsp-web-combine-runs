#! /usr/bin/env python3

"""This script is used to combine two or more bluesky-web hysplit
dispersion runs. It's only dependencies are python3 and docker, so
it can be downloaded as a single file and run as is.
"""

__author__ = "Joel Dubowy"
__copyright__ = "Copyright 2025, AirFire, PNW, USFS"

import argparse
import csv
import json
import logging
import os
import shutil
import subprocess
import sys
import urllib.request
from enum import Enum, auto


class ErrorExitCodes(Enum):
    UNEXPECTED_ERROR = auto()
    INVALID_INPUT = auto()
    OUTPUT_DIR_ALREADY_EXISTS = auto()
    RUN_DOES_NOT_EXIST = auto()
    RUN_HAS_NO_NETCDF_FILE = auto()
    COULD_NOT_FIND_RUN = auto()
    DOWNLOAD_FAILURE = auto()
    FAILED_TO_COMBINE_RUNS = auto()

def failure(error_code, msg):
    print(f"\n*** {msg}\n")
    sys.exit(error_code.value)


EPILOG_STR = """
Examples

    $ {script_name} -r abc123-dispersion -r xyz789-dispersion \\
        -o ./combined-output/abc123-xyz789/ \\
        -u https://www.example.com/bluesky-web/

    $ {script_name} -e -r abc123-dispersion -r xyz789-dispersion \\
        -o ./combined-output/abc123-xyz789/ \\
        -u https://www.example.com/bluesky-web/ \\
        -c /path/to/makedispersionkml-config.ini \\
        -i pnwairfire/bluesky:v4.6.10 \\
        --log-level DEBUG

 """.format(script_name=sys.argv[0])

def parse_args():
    parser = argparse.ArgumentParser(epilog=EPILOG_STR,
        formatter_class=argparse.RawTextHelpFormatter,
        description="A script to combine playground runs.")
    parser.add_argument("-r", "--run-id", required=True,
        action="append", dest="run_ids", help="Run id")
    parser.add_argument("-o", "--output-dir", required=True,
        help="Output directory")
    parser.add_argument("-u", "--bluesky-web-root-url", required=True,
        help="Root url of Bluesky web service (the part before '/api/v4.2/...')")
    parser.add_argument("-e", "--overwrite-existing-output",
        action="store_true")
    parser.add_argument("-c", "--makedispersionkml-config-file",
        help="Config file for makedispersionkml")
    parser.add_argument("-i", "--bluesky-docker-image",
        default="pnwairfire/bluesky", help="Bluesky docker image name")
    parser.add_argument("--log-level", default="INFO", help="Logging level")

    args = parser.parse_args()

    return args

def validate_args(args):
    # run ids
    if not args.run_ids or len(args.run_ids) < 2:
        failure(ErrorExitCodes.INVALID_INPUT, f"\n*** Enter two or more run ids\n")
    if len(list(set(args.run_ids))) < len(args.run_ids):
        failure(ErrorExitCodes.INVALID_INPUT, f"\n*** You have duplicate run ids\n")

    # log level
    if not hasattr(logging, args.log_level):
        failure(ErrorExitCodes.INVALID_INPUT, f"\n*** Invalid log level: {args.log_level}\n")

def configure_logging(log_level):
    logging.basicConfig(
        level=getattr(logging, log_level),
        format="%(asctime)s %(levelname)s: %(message)s",
        datefmt="%Y-%m-%d %H:%M:%S")

COMBINED_NC_FILENAME = 'combined_hysplit_conc.nc'

def create_output_dir(output_dir, overwrite_existing_output):
    full_output_dir = os.path.abspath(output_dir)
    try:
        os.makedirs(full_output_dir) #, exist_ok=True)
    except FileExistsError as e:
        if overwrite_existing_output:
            logging.info(f"{full_output_dir} already exists. Overwriting it.")
            # delete termporary nc files from previous failed runs
            try:
                os.system('rm ' + os.path.join(full_output_dir, COMBINED_NC_FILENAME + '*'))
            except:
                pass
        else:
            failure(ErrorExitCodes.OUTPUT_DIR_ALREADY_EXISTS,
                f"\n*** {full_output_dir} already exists \n")

    return full_output_dir

def get_nc_file_url(run_id, bluesky_web_root_url):
    url = os.path.join(bluesky_web_root_url, 'api', 'v4.2', 'runs', run_id, 'output')
    # Open the URL
    try:
        with urllib.request.urlopen(url) as response:
            if response.status != 200:
                # This shouldn't get hit, since exception is raised by
                # urllib.request.urlopen if not 200
                failure(ErrorExitCodes.RUN_DOES_NOT_EXIST,
                    f"\n*** Can't find run {run_id} \n")

            raw_data = response.read().decode("utf-8")
            data = json.loads(raw_data)
            if not data.get('root_url') or not data.get('netCDF'):
                failure(ErrorExitCodes.RUN_HAS_NO_NETCDF_FILE,
                    f"\n*** Run {run_id} has no netCDF file \n")

            return os.path.join(data['root_url'], data['netCDF'])
    except Exception as e:
        if getattr(e,'code', None) == 404:
            print(f"\n*** Run {run_id} does not exist\n")
        else:
            failure(ErrorExitCodes.COULD_NOT_FIND_RUN,
                f"\n*** Failed to find info about run {run_id}:  {e}\n")

def download(url, pathname):
    if (os.path.exists(pathname)):
        logging.info(f"{pathname} already exists. Skipping download.")
        return

    try:
        logging.info(f'Downloading {url}')
        urllib.request.urlretrieve(url, pathname)
    except Exception as e:
        failure(ErrorExitCodes.DOWNLOAD_FAILURE, f"An error occurred: {e}")



def download_run(output_dir, run_id, bluesky_web_root_url):
    nc_pathname = os.path.join(output_dir, f'hysplit_conc_{run_id}.nc')

    # Get nc url even if we don't need to redownload it, since we'll the need the url
    # in case we need to download accompanying files
    nc_file_url = get_nc_file_url(run_id, bluesky_web_root_url)

    download(nc_file_url, nc_pathname)

    base_url = os.path.dirname(nc_file_url)

    download(os.path.join(base_url, 'summary.json'),
        os.path.join(output_dir, f'summary_{run_id}.json'))

    download(os.path.join(base_url, 'grid_info.json'),
        os.path.join(output_dir, f'grid_info_{run_id}.json'))

    data_dir = os.path.join(output_dir, 'data')
    os.makedirs(data_dir, exist_ok=True)

    download(os.path.join(base_url, 'data', 'fire_locations.csv'),
        os.path.join(data_dir, f'fire_locations_{run_id}.csv'))

    download(os.path.join(base_url, 'data', 'fire_events.csv'),
        os.path.join(data_dir, f'fire_events_{run_id}.csv'))

    return nc_pathname

def run_in_docker(output_dir, bluesky_docker_image, cmd):
    try:
        docker_cmd = [
            'docker', 'run', '--rm',
            '-v', f'{output_dir}:{output_dir}',
            '-w', output_dir,
            bluesky_docker_image,
        ] + cmd
        logging.info(f'running {docker_cmd}')

        result = subprocess.run(docker_cmd, check=True, text=True, capture_output=True)
        print("Command Output:", result.stdout)
    except Exception as e:
        logging.error(e.stderr)
        logging.error(e.stdout)
        failure(ErrorExitCodes.FAILED_TO_COMBINE_RUNS,
            f"An unexpected error occurred: {str(e)}")

def combine_runs(output_dir, nc_pathnames, bluesky_docker_image):
    combined_nc_pathname = os.path.join(output_dir, COMBINED_NC_FILENAME)

    nc_pathnames = [p for p in nc_pathnames]
    cmd = ['ncea', '-O', '-v', 'PM25', '-y', 'ttl'] + nc_pathnames + [combined_nc_pathname]
    run_in_docker(output_dir, bluesky_docker_image, cmd)

    cmd = ['ncks', '-A', '-v', 'TFLAG', nc_pathnames[0], combined_nc_pathname]
    run_in_docker(output_dir, bluesky_docker_image, cmd)

    return combined_nc_pathname

def combine_summary_json(output_dir, run_ids):
    # TODO: is copying one of the runs' summary.json files ok?
    first_summary_json_file = os.path.join(output_dir, f'summary_{run_ids[0]}.json')
    generic_summary_json_file = os.path.join(output_dir, f'summary.json')
    shutil.copy(first_summary_json_file, generic_summary_json_file)

def combine_grid_json(output_dir, run_ids):
    # TODO: is copying one of the runs' grid_info.json files ok?
    first_grid_info_json_file = os.path.join(output_dir, f'grid_info_{run_ids[0]}.json')
    generic_grid_info_json_file = os.path.join(output_dir, f'grid_info.json')
    shutil.copy(first_grid_info_json_file, generic_grid_info_json_file)

def combine_csvs(output_dir, run_ids, base_name):
    all_rows = []
    for s in run_ids:
        csv_pathname = os.path.join(output_dir, 'data', f'{base_name}_{s}.csv')
        with open(csv_pathname) as f:
            reader = csv.DictReader(f)
            for fire in reader:
                all_rows.append(fire)

    # Write data to the CSV file
    all_rows_csv_pathname = os.path.join(output_dir, 'data', f'{base_name}.csv')
    if all_rows:
        with open(all_rows_csv_pathname, mode="w") as f:
            writer = csv.DictWriter(f, fieldnames=list(all_rows[0].keys()))
            writer.writeheader()
            writer.writerows(all_rows)
    else:
        # all files were empty - only headers - so just copy over first
        shutil.copy(csv_pathname, all_rows_csv_pathname)

def create_images(output_dir, combined_nc_pathname, bluesky_docker_image,
        makedispersionkml_config_file):
    cmd = ['makedispersionkml', '--verbose', '-o', output_dir, '-i', combined_nc_pathname]
    if makedispersionkml_config_file:
        config_pathname = os.path.abspath(makedispersionkml_config_file)
        # copy to output dir, since the output dir will be mounted into the docker container
        config_copy_pathname = os.path.join(output_dir,
            os.path.basename(makedispersionkml_config_file))
        shutil.copy(config_pathname, config_copy_pathname)
        cmd += ['-c', config_copy_pathname]

    run_in_docker(output_dir, bluesky_docker_image, cmd)

def main():
    args = parse_args()
    validate_args(args)
    configure_logging(args.log_level)

    output_dir = create_output_dir(args.output_dir, args.overwrite_existing_output)
    nc_pathnames = [
        download_run(output_dir, s_id, args.bluesky_web_root_url)
            for s_id in args.run_ids
    ]
    combined_nc_pathname = combine_runs(output_dir, nc_pathnames,
        args.bluesky_docker_image)

    combine_summary_json(output_dir, args.run_ids)
    combine_grid_json(output_dir, args.run_ids)
    combine_csvs(output_dir, args.run_ids, 'fire_locations')
    combine_csvs(output_dir, args.run_ids, 'fire_events')

    create_images(output_dir, combined_nc_pathname,
        args.bluesky_docker_image, args.makedispersionkml_config_file)

if __name__ == "__main__":
    main()
