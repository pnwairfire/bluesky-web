#! /usr/bin/env python3

__author__ = "Joel Dubowy"
__copyright__ = "Copyright 2015, AirFire, PNW, USFS"

import sys
import traceback

import tornado.log

import afscripting as scripting

try:
    from blueskyweb.app import main, DEFAULT_SETTINGS
    from blueskyconfig import ConfigManagerSingleton
except:
    import os
    root_dir = os.path.abspath(os.path.join(sys.path[0], '../'))
    sys.path.insert(0, root_dir)
    from blueskyweb.app import main, DEFAULT_SETTINGS
    from blueskyconfig import ConfigManagerSingleton

REQUIRED_ARGS = [
    {
        'short': '-o',
        'long': '--output-root-dir',
        'help': "root directory of output on worker machines"
    }
]

OPTIONAL_ARGS = [
    {
        'long': '--config-overrides-file',
        'help': ('config overrides file that will be reloaded periodically to pick'
            ' up any updates.  Files are loaded in the order they are specified'
            ' so that each one overrides any specified before it.'),
        "action": "append",
        "dest": 'config_overrides_files'
    },
    {
        'long': '--path-prefix',
        'help': "Url root path prefix to apply to all routes; e.g. '/bluesky-web'"
    },
    {
        'short': '-p',
        'long': '--port',
        'help': 'run the server listening on specified port (defaults to 8887)'
    },
    {
        'long': '--output-url-scheme',
        'help': "http vs https (defaults to {})".format(
            DEFAULT_SETTINGS['output_url_scheme'])
    },
    {
        'long': '--output-url-port',
        'help': ("Port that output web server will listen on "
            "(defaults to {})".format(DEFAULT_SETTINGS['output_url_port']))
    },
    {
        'long': '--output-url-path-prefix',
        'help': ("Url root path prefix to access output on worker servers "
            "(defaults to {})".format(DEFAULT_SETTINGS['output_url_path_prefix']))
    },
    {
        # this is supposed to be a string, since it's passed into
        # the bsp docker command
        'long': '--bluesky-log-level',
        'help': "Log level of bluesky pipeline run".format(
            DEFAULT_SETTINGS['bluesky_log_level'])
    },
    {
        'short': '-d',
        'long': '--debug',
        'help': 'run the server in debug mode (with auto-reloading of code, etc.)',
        'action': "store_true",
        'default': False
    },
    {
        'long': '--mongodb-url',
        'help': 'url to connect to mongodb for arl indexes and recording run status'
    },
    {
        'long': '--rabbitmq-url',
        'help': 'url to connect to rabbitmq for bsp job queues'
    }
]

# Note: the trailing space seems to be the only way to add an extra trailing line
EPILOG_STR = """
Examples

   $ {script_name} --log-level=DEBUG -d --path-prefix=bluesky \\
        --mongodb-url=mongodb://localhost:27018/blueskyweb \\
        --rabbitmq-url=amqps://localhost:5671 \\
        --config-overrides-file /etc/bluesky-web/config-overrides.json \\
        --config-overrides-file /etc/bluesky-web/config-final-overrides.json

Example curl Requests

    $ curl "http://localhost:8887/blueskyweb/api/ping/"
 """.format(script_name=sys.argv[0])

if __name__ == "__main__":
    parser = scripting.args.ArgumentParser()
    parser.epilog = EPILOG_STR
    parser.formatter_class = scripting.args.RawTextHelpFormatter
    scripting.args.add_arguments(parser, OPTIONAL_ARGS)
    scripting.args.add_arguments(parser, REQUIRED_ARGS, required=True)
    scripting.args.add_configuration_options(parser, support_short_names=True)
    # Use afscripting to add logging options to the parser object,
    # but we'll configure logging oureselves in app.main
    scripting.args.add_logging_options(parser)
    args = parser.parse_args()

    for o in args.config_overrides_files:
        ConfigManagerSingleton().add_overrides_file(o)

    ConfigManagerSingleton().add_overrides(args.config_file_options)
    ConfigManagerSingleton().add_overrides(args.config_options)

    try:
        main(**args.__dict__)
    except Exception as e:
        tornado.log.gen_log.debug(traceback.format_exc())
        tornado.log.gen_log.error(e)
        sys.exit(1)
